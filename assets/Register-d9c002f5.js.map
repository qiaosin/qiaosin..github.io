{"version":3,"file":"Register-d9c002f5.js","sources":["../../src/components/user/RegisterForm.vue"],"sourcesContent":["<script lang=\"ts\" setup>\nimport { ref, reactive, watch } from 'vue'\nimport { useI18n } from 'vue-i18n'\nimport Form from '@/components/common/Form.vue'\nimport { registerApi, getValidCodeApi } from '@/api/user'\nconst { t, locale } = useI18n()\nimport Message from '@/utils/message'\nimport { useRouter } from 'vue-router'\nimport regExt from '@/utils/regext'\nconst router = useRouter()\n\nconst handleEmailCountdown = () => {\n  const countDownTime = localStorage.getItem('ahab_email_time')\n  if (countDownTime) {\n    let remainTime = Math.floor((+countDownTime + 60 * 1000 - new Date().getTime()) / 1000)\n    if (remainTime > 0) {\n      formConfig.value.email.buttonText = `${remainTime}s`\n      formConfig.value.email.buttonDisabled = true\n      const inter = setInterval(() => {\n        if (remainTime <= 1) {\n          clearInterval(inter)\n          formConfig.value.email.buttonText = t('login.sendVfcCode')\n          formConfig.value.email.buttonDisabled = false\n          return\n        }\n        formConfig.value.email.buttonText = `${--remainTime}s`\n      }, 1000)\n    }\n  }\n}\n\nconst ruleForm = reactive({\n  name: '',\n  email: '',\n  verificationCode: '',\n  password: '',\n  confirmPassword: '',\n})\nconst handleSendVerificationCode = async () => {\n  try {\n    console.log('send code')\n    localStorage.setItem('ahab_email_time', '' + new Date().getTime())\n    handleEmailCountdown()\n    const res: any = await getValidCodeApi({ email: ruleForm.email })\n    console.log(res, '===res')\n    if (res.statusCode === 200) {\n      Message.toast('验证码发送成功！')\n    } else {\n      Message.error(res.message)\n    }\n  } catch (error: any) {\n    Message.error(error.message || error.data.message)\n  }\n}\nconst handleEmailBlur = (value: string) => {\n  // const regExt = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}$/\n  if (value && regExt.email.test(value)) {\n    formConfig.value.email.buttonDisabled = false\n  } else {\n    formConfig.value.email.buttonDisabled = true\n  }\n}\nconst initConfig = () => ({\n  name: {\n    placeholder: t('login.userName'),\n  },\n  email: {\n    placeholder: t('login.email'),\n    onBlur: handleEmailBlur,\n    withButton: true,\n    buttonText: t('login.sendVfcCode'),\n    buttonDisabled: true,\n    buttonClick: handleSendVerificationCode,\n  },\n  verificationCode: {\n    placeholder: t('login.verificationCode'),\n  },\n  password: {\n    placeholder: t('login.password'),\n    type: 'password',\n  },\n  confirmPassword: {\n    placeholder: t('login.confirmPassword'),\n    type: 'password',\n  },\n})\nconst formConfig = ref(initConfig())\n\nhandleEmailCountdown()\n\nconst validatePass = () => (_rule: any, value: any, callback: any) => {\n  try {\n    if (value === '') {\n      callback(new Error(t('login.passwordNull')))\n    } else if (!regExt.password.test(value)) {\n      callback(new Error(t('login.passwordInvalid')))\n    } else {\n      if (ruleForm.confirmPassword !== ruleForm.password) {\n        // callback(new Error(t('login.confirmPasswordError')))\n        // if (!ruleFormRef.value) return\n        // ruleFormRef.value.validateField('confirmPassword', () => null)\n      }\n      callback()\n    }\n  } catch (error) {\n    console.log(error)\n  }\n}\nconst validatePass2 = () => (_rule: any, value: any, callback: any) => {\n  if (value === '') {\n    callback(new Error(t('login.confirmPasswordNull')))\n  } else if (value !== ruleForm.password) {\n    callback(new Error(t('login.confirmPasswordError')))\n  } else {\n    callback()\n  }\n}\n\nconst initRule = () => ({\n  verificationCode: [\n    {\n      required: true,\n      message: t('login.vfcCodeNull'),\n      trigger: 'blur',\n    },\n  ],\n  email: [\n    {\n      required: true,\n      message: t('login.emailNull'),\n      trigger: 'blur',\n    },\n    {\n      type: 'email',\n      message: t('login.emailError'),\n      trigger: 'blur',\n    },\n  ],\n  name: [\n    {\n      required: true,\n      message: t('login.nameNull'),\n      trigger: 'blur',\n    },\n    { min: 2, max: 20, message: t('login.nameError'), trigger: 'blur' },\n  ],\n  password: [\n    {\n      validator: validatePass(),\n      trigger: 'blur',\n    },\n  ],\n  confirmPassword: [\n    {\n      validator: validatePass2(),\n      trigger: 'blur',\n    },\n  ],\n})\n\nconst rules = ref(initRule())\n\nconst submitForm = async () => {\n  try {\n    const res: any = await registerApi({\n      nickname: ruleForm.name,\n      email: ruleForm.email,\n      password: ruleForm.password,\n      code: ruleForm.verificationCode,\n    })\n    console.log(res, '===res')\n    if (res.statusCode === 200) {\n      Message.toast('注册成功！')\n      router.push('login')\n    } else {\n      Message.error(res.message)\n    }\n  } catch (error: any) {\n    Message.error(error.message || error.data.message)\n  }\n}\n\nwatch(locale, () => {\n  rules.value = initRule()\n  formConfig.value = initConfig()\n})\n</script>\n<template>\n  <div class=\"user-form\">\n    <div class=\"user-form-title\">{{ t('login.register') }}</div>\n    <Form\n      v-model:ruleForm=\"ruleForm\"\n      :formConfig=\"formConfig\"\n      :rules=\"rules\"\n      :confirmText=\"t('confirm')\"\n      :resetText=\"t('reset')\"\n      :showReset=\"true\"\n      @submit=\"submitForm\"\n    ></Form>\n    <!-- <el-form\n      ref=\"ruleFormRef\"\n      :model=\"ruleForm\"\n      :rules=\"rules\"\n    >\n      <el-form-item prop=\"inviteCode\">\n        <el-input class=\"ahab-input\" v-model=\"ruleForm.inviteCode\" :placeholder=\"t('login.inviteCode')\"/>\n      </el-form-item>\n      <el-form-item prop=\"email\">\n        <el-input class=\"ahab-input\" v-model=\"ruleForm.email\" :placeholder=\"t('login.email')\"/>\n      </el-form-item>\n      <el-form-item prop=\"name\">\n        <el-input class=\"ahab-input\" v-model=\"ruleForm.name\" :placeholder=\"t('login.userName')\"/>\n      </el-form-item>\n      <el-form-item prop=\"password\">\n        <el-input class=\"ahab-input\" type=\"password\" v-model=\"ruleForm.password\" :placeholder=\"t('login.password')\"/>\n      </el-form-item>\n      <el-form-item prop=\"confirmPassword\">\n        <el-input class=\"ahab-input\" type=\"password\" v-model=\"ruleForm.confirmPassword\" :placeholder=\"t('login.confirmPassword')\"/>\n      </el-form-item>\n      <el-form-item>\n        <div class=\"user-form-item\">\n          <el-button type=\"primary\" @click=\"submitForm(ruleFormRef)\">{{ t('login.register') }}</el-button>\n        </div>\n      </el-form-item>\n    </el-form> -->\n  </div>\n</template>\n<style lang=\"scss\" scoped>\n@use '@/assets/scss/user/index.scss';\n</style>\n"],"names":["t","locale","useI18n","router","useRouter","handleEmailCountdown","countDownTime","remainTime","formConfig","inter","ruleForm","reactive","handleSendVerificationCode","res","getValidCodeApi","Message","error","handleEmailBlur","value","regExt","initConfig","ref","validatePass","_rule","callback","validatePass2","initRule","rules","submitForm","registerApi","watch"],"mappings":"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"}